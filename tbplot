#!/usr/bin/env python3

import argparse
import fnmatch
import multiprocessing
import os
from math import ceil

import tensorflow as tf
from pylab import plt, savefig, figlegend, tight_layout

plt.rcParams.update({'figure.max_open_warning': 0})


def find_files_matching_pattern(pattern, path):
    result = []
    for root, dirs, files in os.walk(path, followlinks=True):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                result.append(os.path.join(root, name))
    return result


def read_events_file(events_filename):
    events = {}
    try:
        for event in tf.train.summary_iterator(events_filename):
            for value in event.summary.value:
                if value.tag not in events:
                    events[value.tag] = []
                events[value.tag].append((event.wall_time, event.step, value.simple_value))
    except Exception as e:
        print(f"While reading '{events_filename}':", e)
    return events


def read_all_events(log_dirs):
    events_by_log_dir = {}

    log_dir_event_file_tuples = []
    for log_dir in log_dirs:
        for event_file in find_files_matching_pattern('events.out.tfevents*', log_dir):
            log_dir_event_file_tuples.append((log_dir, event_file))

    pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())
    tuple_log_dirs, tuple_event_files = list(zip(*log_dir_event_file_tuples))
    events_in_each_file = pool.map(read_events_file, tuple_event_files)
    for log_dir, events in zip(tuple_log_dirs, events_in_each_file):
        if log_dir not in events_by_log_dir:
            events_by_log_dir[log_dir] = {}
        events_by_log_dir[log_dir].update(events)

    return events_by_log_dir


def smooth_values(values, smoothing):
    smoothed_values = []
    last = values[0]
    for v in values:
        smoothed_values.append(smoothing * last + (1 - smoothing) * v)
        last = smoothed_values[-1]
    return smoothed_values


def plot_values(ax, y_values, x_values, yname, xname, title_str, label, color, smoothing):
    smoothed_y_values = smooth_values(y_values, smoothing)
    ax.plot(x_values, y_values, alpha=0.2, color=color)
    line = ax.plot(x_values, smoothed_y_values, label=label, color=color)[0]
    ax.set_ylabel(yname)
    ax.set_xlabel(xname)
    ax.set_title(title_str)
    ax.grid(True)
    return line


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('log_dir', nargs='*')
    parser.add_argument('--step', action='store_true')
    parser.add_argument('--n_cols', type=int, default=4)
    parser.add_argument('--smoothing', type=float, default=0.6)
    parser.add_argument('--out')
    parser.add_argument('--dpi', type=int, default=70)
    args = parser.parse_args()
    if not args.log_dir:
        raise Exception("Specify at least one log directory")
    for d in args.log_dir:
        if not os.path.exists(d):
            raise Exception(f"Directory '{d}' does not exist")
        if not os.path.isdir(d):
            raise Exception(f"'{d}' is not a directory")
    return args


def scale_timestamps(timestamps):
    t = max(timestamps)
    if t < 1:
        d = 1e-3
        units = 'ms'
    elif t < 60:
        d = 1
        units = 'seconds'
    elif t < 3600:
        d = 60
        units = 'minutes'
    else:
        d = 3600
        units = 'hours'
    for n in range(len(timestamps)):
        timestamps[n] /= d
    return units


def split_preserving_seps(s, seps=('_', '-')):
    """
    'foo-bar_1' => ['foo', '-', 'bar', '_', '1']
    """
    arr = []
    cur = ""
    for c in s:
        if c in seps:
            if cur:
                arr.append(cur)
            arr.append(c)
            cur = ""
        else:
            cur += c
    arr.append(cur)
    return arr


def common_name(names):
    """
    ['foo-1-bar', 'foo-2-bar'] => 'foo-*-bar'
    """
    fields = [split_preserving_seps(name) for name in names]
    if len({len(field) for field in fields}) == 1:
        n_fields = len(fields[0])
        common_name = ""
        for n in range(n_fields):
            if len({field[n] for field in fields}) == 1:
                # This field the same in all names
                common_name += fields[0][n]
            else:
                common_name += '*'
    else:
        longest_common_prefix = os.path.commonprefix(names)
        longest_common_suffix = os.path.commonprefix([d[::-1] for d in names])[::-1]
        common_name = longest_common_prefix + '*' + longest_common_suffix
    return common_name


def main():
    args = get_args()

    # Removing trailing slashes
    args.log_dir = [os.path.normpath(d) for d in args.log_dir]

    print("Reading events...")
    events_by_log_dir = read_all_events(args.log_dir)

    print("Plotting...")

    all_tags = sorted(set([key for events in events_by_log_dir.values() for key in events.keys()]))
    n_graphs = len(all_tags)
    if n_graphs < args.n_cols:
        args.n_cols = n_graphs
    w, h = (int(ceil(n_graphs / args.n_cols)), args.n_cols)
    fig, axes = plt.subplots(w, h, figsize=(6 * h, 4 * w), squeeze=False)
    axes = [ax for l in axes for ax in l]
    axes_by_tag = {tag: axes[n] for n, tag in enumerate(all_tags)}
    lines, labels = [], []
    for log_dir_n, (log_dir, events) in enumerate(events_by_log_dir.items()):
        print(log_dir)
        color = f"C{log_dir_n % 10}"
        label = log_dir
        for tag, events in events.items():
            ax = axes_by_tag[tag]
            timestamps, steps, values = list(zip(*events))

            if args.step:
                xvals = steps
                xlab = 'Total Timesteps'
            else:  # relative timestamps
                xvals = [t - timestamps[0] for t in timestamps]
                units = scale_timestamps(xvals)
                xlab = f'Time ({units})'
            line = plot_values(ax, values, xvals, 'Value', xlab, tag,
                               label=label, color=color, smoothing=args.smoothing)
            lines.append(line)
            labels.append(label)
    for n in range(len(all_tags), len(axes)):
        axes[n].axis('off')
    tight_layout()

    unique_lines = []
    unique_labels = []
    for line, label in zip(lines, labels):
        if label not in unique_labels:
            unique_labels.append(label)
            unique_lines.append(line)
    figlegend(unique_lines, unique_labels, bbox_to_anchor=(0.5, 1.0), loc='lower center')

    print("Saving figure...")
    if args.out is not None:
        out_filename = args.out
    else:
        if len(args.log_dir) == 1:
            out_filename = os.path.basename(args.log_dir[0] + '.png')
        else:
            out_filename = common_name(args.log_dir) + '.png'
    savefig(out_filename, bbox_inches='tight', dpi=args.dpi)


if __name__ == '__main__':
    main()
